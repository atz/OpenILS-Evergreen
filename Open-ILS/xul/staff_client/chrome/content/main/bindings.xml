<?xml version="1.0"?>

<bindings id="openils_bindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl">

	<binding id="messagecatalog">
		<resources/>

		<content>
			<children>
			</children>
		</content>

		<implementation>

			<constructor>
				<![CDATA[
                try {
                        this._load_sprintf();
                        this._props = {};
                        this._load_from_src();
                } catch(E) {
                    alert('Error constructing messagecatalog in bindings.xml: ' + E);
                    throw(E);
                }
				]]>
			</constructor>

			<property name="src">
				<getter>
					<![CDATA[
                    try {
    					return this.getAttribute('src');
                    } catch(E) {
                        alert('Error getting @src in messagecatalog in bindings.xml: ' + E);
                        throw(E);
                    }
					]]>
				</getter>
				<setter>
					<![CDATA[
                    try {
					    this.setAttribute('src',val);
    					this.load_from_src();
    					return val;
                    } catch(E) {
                        alert('Error setting @src in messagecatalog in bindings.xml: ' + E);
                        throw(E);
                    }
					]]>
				</setter>
			</property>

			<method name="_load_from_src">
				<body>
					<![CDATA[
                    try {
                            var x = new XMLHttpRequest();
                            x.open("GET",this.src,false);
                            x.send(null);
                            if (x.responseText) {
                                var props = this._props2object(x.responseText);
                                for (var i in props) {
                                    this._props[i] = props[i];
                                }
                            } else {
                                var msg = "messageCatalog: No text from " + this.src;
                                alert(msg); throw(msg);
                            }
                    } catch(E) {
                        alert('Error loading properties in messagecatalog in bindings.xml: ' + E);
                        throw(E);
                    }
					]]>
				</body>
			</method>

			<method name="_props2object">
				<parameter name="str"/>
				<body>
					<![CDATA[
                        try {
                            var lines = str.split("\n");
                            var props = {};
                            var line = '';
                            var in_comment = false;

                            for (var l in lines) {
                                line += lines[l];

                                // handle multi-line comments
                                if (line.indexOf('/*') >= 0) in_comment = true;

                                if (in_comment && line.indexOf('*/') > 0) {
                                    var comment_start = line.indexOf('/*');
                                    var comment_end = line.indexOf('*/');
                                    line = line.substring(0, comment_start) + line.substring(0, comment_end + 2);
                                    in_comment = false;
                                } else if (in_comment) continue;
                                    
                                // get rid of entire-line comments
                                if (line.indexOf('#') == 0) {
                                    line = '';
                                    continue;
                                }

                                // handle end-of-line comments
                                var end_comment = line.indexOf('//');
                                if (end_comment >= 0) line = line.substring(0, end_comment);

                                // and line concatenation
                                if (line.charAt(line.length - 1) == '\\') {
                                    line = line.substring(0,line.length - 1);
                                    continue;
                                }

                                var eq_pos = line.indexOf('=');
                                if (eq_pos < 0) continue;

                                var k = line.substring(0,eq_pos);
                                k = k.replace(/\s+/g,"");

                                var v = line.substring(eq_pos + 1);

                                var current_m = 0;
                                var cont = false;
                                do {    
                                    if (v.indexOf( "{" + current_m + "}" ) >= 0 ) {
                                        var mes_bund = new RegExp( "\\\{" + current_m + "\\\}", 'g' );
                                        var sprintf_format = "%" + (current_m + 1) + "$s";

                                        v = v.replace( mes_bund, sprintf_format );

                                        cont = true;
                                        current_m++;
                                    } else {
                                        cont = false;
                                    }
                                } while ( cont == true );

                                props[k] = v;
                                line = '';
                                }

                            return props;
                        } catch(E) {
                            alert('Error in props2object in messagecatalog in bindings.xml: ' + E);
                            throw(E);
                        }
					]]>
				</body>
			</method>

			<method name="testString">
				<parameter name="key"/>
				<body>
					<![CDATA[
						try {
                            var str = this._props[key];
                            return (typeof str != 'undefined');
						} catch(e) {
                            return false;
						}
					]]>
				</body>
			</method>


			<method name="getString">
				<parameter name="key"/>
				<body>
					<![CDATA[
						try {
                            var str = this._props[key];
                            if (typeof str == 'undefined') throw(str);
							return str;
						} catch(e) {
							alert("*** Failed to get string " + key + " in bundle: " + this.src + "\n" + e);
							throw(e);
						}
					]]>
				</body>
			</method>

			<method name="getFormattedString">
				<parameter name="key"/>
				<parameter name="params"/>
				<body>
					<![CDATA[
						try {
							var str = this._props[key]; 
                            if (typeof str == 'undefined') throw(str);
							var these = [ str ].concat(params);
							var v = this.sprintf.apply(this,these);

							// replace unicode escapes
/*
							v = v.replace(
								/\\u([0-9a-f]{4})/gi,
								function (r,s) { return String.fromCharCode(s); }
							);
*/

							return v;
						} catch(e) {
							alert("*** Failed to get string " + key + " in bundle: " + this.src + "\n");
							throw(e);
						}
					]]>
				</body>
			</method>

			<method name="_load_sprintf">
				<body>
					<![CDATA[
					try { 
						this.sprintf = function() {
								// FIXME - is the following license GPL-compatible? seems equivalent to the public domain
								/**
								 * JavaScript printf/sprintf functions.
								 *
								 * This code is unrestricted: you are free to use it however you like.
								 * 
								 * The functions should work as expected, performing left or right alignment,
								 * truncating strings, outputting numbers with a required precision etc.
								 *
								 * For complex cases, these functions follow the Perl implementations of
								 * (s)printf, allowing arguments to be passed out-of-order, and to set the
								 * precision or length of the output based on arguments instead of fixed
								 * numbers.
								 *
								 * See http://perldoc.perl.org/functions/sprintf.html for more information.
								 *
								 * Implemented:
								 * - zero and space-padding
								 * - right and left-alignment,
								 * - base X prefix (binary, octal and hex)
								 * - positive number prefix
								 * - (minimum) width
								 * - precision / truncation / maximum width
								 * - out of order arguments
								 *
								 * Not implemented (yet):
								 * - vector flag
								 * - size (bytes, words, long-words etc.)
								 * 
								 * Will not implement:
								 * - %n or %p (no pass-by-reference in JavaScript)
								 *
								 * @version 2007.04.27
								 * @author Ash Searle
								 */

							function pad(str, len, chr, leftJustify) {
							var padding = (str.length >= len) ? '' : Array(1 + len - str.length >>> 0).join(chr);
							return leftJustify ? str + padding : padding + str;

							}

							function justify(value, prefix, leftJustify, minWidth, zeroPad) {
							var diff = minWidth - value.length;
							if (diff > 0) {
								if (leftJustify || !zeroPad) {
								value = pad(value, minWidth, ' ', leftJustify);
								} else {
								value = value.slice(0, prefix.length) + pad('', diff, '0', true) + value.slice(prefix.length);
								}
							}
							return value;
							}

							function formatBaseX(value, base, prefix, leftJustify, minWidth, precision, zeroPad) {
							// Note: casts negative numbers to positive ones
							var number = value >>> 0;
							prefix = prefix && number && {'2': '0b', '8': '0', '16': '0x'}[base] || '';
							value = prefix + pad(number.toString(base), precision || 0, '0', false);
							return justify(value, prefix, leftJustify, minWidth, zeroPad);
							}

							function formatString(value, leftJustify, minWidth, precision, zeroPad) {
							if (precision != null) {
								value = value.slice(0, precision);
							}
							return justify(value, '', leftJustify, minWidth, zeroPad);
							}

							var a = arguments, i = 0, format = a[i++];
							return format.replace(/%%|%(\d+\$)?([-+#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuidfegEGS])/g, function(substring, valueIndex, flags, minWidth, _, precision, type) {
								if (substring == '%%') return '%';

								// parse flags
								var leftJustify = false, positivePrefix = '', zeroPad = false, prefixBaseX = false;
								for (var j = 0; flags && j < flags.length; j++) switch (flags.charAt(j)) {
								case ' ': positivePrefix = ' '; break;
								case '+': positivePrefix = '+'; break;
								case '-': leftJustify = true; break;
								case '0': zeroPad = true; break;
								case '#': prefixBaseX = true; break;
								}

								// parameters may be null, undefined, empty-string or real valued
								// we want to ignore null, undefined and empty-string values

								if (!minWidth) {
								minWidth = 0;
								} else if (minWidth == '*') {
								minWidth = +a[i++];
								} else if (minWidth.charAt(0) == '*') {
								minWidth = +a[minWidth.slice(1, -1)];
								} else {
								minWidth = +minWidth;
								}

								// Note: undocumented perl feature:
								if (minWidth < 0) {
								minWidth = -minWidth;
								leftJustify = true;
								}

								if (!isFinite(minWidth)) {
								throw new Error('sprintf: (minimum-)width must be finite');
								}

								if (!precision) {
								precision = 'fFeE'.indexOf(type) > -1 ? 6 : (type == 'd') ? 0 : void(0);
								} else if (precision == '*') {
								precision = +a[i++];
								} else if (precision.charAt(0) == '*') {
								precision = +a[precision.slice(1, -1)];
								} else {
								precision = +precision;
								}

								// grab value using valueIndex if required?
								var value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];

								switch (type) {
								case 'S':
								case 's': return formatString(String(value), leftJustify, minWidth, precision, zeroPad);
								case 'c': return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);
								case 'b': return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);
								case 'o': return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);
								case 'x': return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);
								case 'X': return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase();
								case 'u': return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);
								case 'i':
								case 'd': {
										  var number = parseInt(+value);
										  var prefix = number < 0 ? '-' : positivePrefix;
										  value = prefix + pad(String(Math.abs(number)), precision, '0', false);
										  return justify(value, prefix, leftJustify, minWidth, zeroPad);
									  }
								case 'e':
								case 'E':
								case 'f':
								case 'F':
								case 'g':
								case 'G':
										  {
										  var number = +value;
										  var prefix = number < 0 ? '-' : positivePrefix;
										  var method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())];
										  var textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2];
										  value = prefix + Math.abs(number)[method](precision);
										  return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();
									  }
								default: return substring;
								}
								});
						}
					} catch(e) {
						alert("*** Failed to load sprintf library: " + e + "\n");
						throw(e);
					}
					]]>
				</body>
			</method>
		</implementation>
	</binding>

	<binding id="caption" extends="chrome://global/content/bindings/general.xml#basetext">
		<resources>
			<stylesheet src="chrome://global/skin/groupbox.css"/>
		</resources>

		<content>
			<children>
				<xul:image
					onclick="
						var n = document.getAnonymousNodes(parentNode.parentNode)[1];
						if (n.hidden) {
							n.hidden = false;
						    // this.setAttribute('src','chrome://open_ils_staff_client/skin/media/images/opentriangle.gif'); // security error
						} else {
							n.hidden = true;
							// this.setAttribute('src','chrome://open_ils_staff_client/skin/media/images/triangle.gif'); // security error
						}
					"
				/>
				<xul:image class="caption-icon" xbl:inherits="src=image"/>
				<xul:label class="caption-text" flex="1" xbl:inherits="default,value=label,crop,accesskey" />
			</children>
		</content>

		<implementation>
			<constructor>
				<![CDATA[
					var n = document.getAnonymousNodes(this)[0];
					// n.setAttribute('src','chrome://open_ils_staff_client/skin/media/images/opentriangle.gif'); // security error
				]]>
			</constructor>
		</implementation>
	</binding>

</bindings>
